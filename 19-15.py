import sys
import collections

# Part 1 - Found it,.. but unfortunately it was done partly manually, so no general solution yet, :(
# I nearly had an automatic algorithm, but was failed due to multiple pathways.
# Steadliy, tunnelled through the map using a psuedo-automatic algorithm.
# When dead ends were found, I blocked them off with a 'banned' list, then ran the algorithm again.
# Below is the map S is start, O is the Oxygen

# Part 2- Did the same thing with part 2. Kept on following paths until I found the furthest one.
# Still no general solution yet:(

#___######________###########____________
#__#.......______#...........#___________
#__#.#####.####__#.#########.#___________
#__#.....#.#...#_#.#_______#.#___________
#___####.#.#.#.###.#_______#.##__________
#____#...#...#...#...#______...#_________
#____#.######_##.###.######__#.########__
#____#.#O....___.__#.#.....#_#.........#_
#____#.#####.#_#.###.#.###.#####_#####.#_
#____#.......#_#.....#...#.....#_____#.#_
#_____#######___########.#####.####__#.#_
#__________________#.....#_#...#...#_#.#_
#_________________##.####__#.###.#.###.#_
#________________#...#_____#.#...#.....#_
#________________#.##______#.#.##_#####__
#________________#.#_______#.#...#_______
#_______________##.#_______#.###.#_______
#______________#...#_______#.....#_______
#______________#.##___###___#####________
#______________#.#___#...#_______________
#______________#.##__#.#.#_______________
#______________#...#_#.#S#_______________
#_______________##.#_#.####______________
#________________#.#_#.....#_____________
#___________###_##.#__####.#_____________
#__________#...#...#_____#.#_____________
#_______####.#.#.##______#.#_____________
#______#.....#...#_______#.#_____________
#______#.########___###__#.#_____________
#______#.#.....#___#...#_#.#_____________
#______#.#.###.#___#.#.###.#_____________
#______#...#_#.#___#.#.....#_____________
#_______###__#.##__#.######______________
#____________#...#_#.#___________________
#_____________##.###.#___________________
#______________#.....#___________________
#_______________#####____________________


# part 1 only

r = list(map(int, open('19-15.txt').read().split(',')))

def pad(st):
  g = ''
  for u in range(5-len(st)): g += '0'
  return g + st

def gmd(m,rb):
    a1 = a2 = a3 = 0
    if m[2] == '2': a1 = rb 
    if m[1] == '2': a2 = rb
    if m[0] == '2': a3 = rb
    return([a1,a2,a3])

def docmd(r,input):
    f = collections.defaultdict(lambda: 0, enumerate(r))
    inp = []   
    outputs,dr,rob,op,rb = [],0,(0,0),0,0
    ps = {(0,0):4}
    inp = input[:]
    #print(inp)
    sd = {(0,-1):'N',(0,1):'S',(-1,0):'W',(1,0):'E'}
    dr = ['N','S','W','E']
    d = [[0,-1],[0,1],[-1,0],[1,0]]#ULDR
    while f[op] != 99:
        i = pad(str(f[op]))
        o = i[-2:]
        [a1,a2,a3] = gmd(i[:3],rb)
        if int(o) < 10:
           if i[2] == '1':
              op1 = f[op+1]
           else:
              op1 = f[a1+f[op+1]]
        if int(o) in [1,2,5,6,7,8]:
            if i[1] == '1':
               op2 = f[op+2]
            else:
               op2 = f[a2+f[op+2]]
        if o == '01':
            f[a3+f[op+3]] = op1+op2
            op += 2
        if o == '02':
            f[a3+f[op+3]] = op1*op2
            op += 2
        if o == '03':
            #if len(inp) == 0:
              #yield
            f[a1+f[op+1]] = inp[0]
            d = inp[0]
            #print('inp',inp)
            inp.pop(0)
        if o  == '04':
            outputs.append(op1)            
            #print('op1',op1)
            #print(ps)
            nrob = (0,0)
            if d == 1:
                nrob = (rob[0],rob[1]-1)
                #print('north',rob)
            if d == 2:
                nrob = (rob[0],rob[1]+1)
                #print('south',rob)
            if d == 3:
                nrob = (rob[0]-1,rob[1])
                #print('west',rob)
            if d == 4:
                nrob = (rob[0]+1,rob[1])
                #print('east',rob)
            if op1 == 1:
              rob = nrob              
              ps[rob] = 0
            if op1 == 0:              
              ps[nrob] = 1
            if op1 == 2:
              print('found')
              ps[nrob] = 2
            if len(inp) == 0:
              return ps,rob,op1
        if o == '05':
            if op1 != 0:
                op = op2 - 2
            else:
                op += 1
        if o == '06':
            if op1 == 0:
               op = op2 - 2
            else:
               op += 1
        if o == '07':
            if op1 < op2:
              f[f[op+3]+a3] = 1
            else:
              f[f[op+3]+a3] = 0
            op += 2
        if o == '08':
            if op1 == op2:
                 f[f[op+3]+a3] = 1
            else:
                 f[f[op+3]+a3] = 0
            op += 2
        if o == '09': rb += op1
        op += 2


found = False
ct = 0
#while not found:
if True:

    rpath = [(0,0)]
    rob = (0,0)#(12, -3)#(16, 16)#(-4,18)#(-18,18)#(0,0)
    nrob = (0,0)
    drob = (0,0)
    path = []\
#[1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 1, 1, 1, 1, 3, 3, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 2, 2, 2]
#[1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1]
#[1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 1, 1, 1, 1, 3, 3, 2, 2, 3, 3]
    #[1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 2, 2]
#[1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 3, 3, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2]
    #[2, 3, 4, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 1, 3, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 2, 3, 4, 1, 2, 4, 1, 2, 4, 1, 2, 4, 1, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 2, 4, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 1, 3, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 2, 4, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 2, 3, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3, 2, 3, 4, 2, 2, 4, 3, 1, 2, 3, 2, 3, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 1, 2, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 1, 4, 2, 3, 4, 2, 2, 3, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 2, 3, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 1, 2, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 2, 3, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 1, 2, 4, 1, 2, 4, 1, 4, 2, 3, 4, 2, 2, 3, 4, 1, 2, 4, 1, 2, 4, 1, 2, 4, 1, 4, 2, 3, 4, 2, 2, 4, 3, 1, 2, 3, 1, 3, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 2, 3, 4, 1, 2, 4, 1, 2, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 2, 3, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 1, 3, 4, 1, 2, 4, 1, 4, 2, 3, 4, 2, 2, 3, 4, 1, 2, 4, 1, 2, 4, 1, 2, 4, 2, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3, 1, 2, 3, 2, 3, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 3, 2, 3, 4, 2, 2, 3, 4, 2, 2, 3, 4, 2]
    banned = {(4,-16):1,(-8,-14):1,(-14,-20):3,(-8,-10):2,\
              (-10, 2):3,(-16, 4):3,(18,16):1,(-18,16):4,\
              (18, 16):1,(-10,16):1,(12, 6):1,(8,4):3,(14,2):3,
              (4, 4):1,(2, -2):1,(-2, -6):3,(2, -8):1,(-4, -4):2,(-4, -2):2,\
              (-4, 6):4,(-6, 10):2,(0,6):1,(10, -2):1,
              (18, -2):1,(18, -9):1,(16, -10):1,(18, -14):1,(10, -20):3,\
              (18, -2):1,(-12, -14):3}
    
    
    nbpath = path[:]
    #while not found:
    for step in range(250):
      op1 = 1
      border = []
      for ra in [1,2,3,4]:
        #print(banned)
        if rob in banned:
          #print('rob',rob)
          a = banned[rob]
        else:
          a = ra
        ct += 1
        npath = path[:]
        npath.append(a)
        nmap,frob,op1 = docmd(r,npath)
        if op1 == 0:          
          border.append(a)
        if op1 == 1:
          if a == 1:
             nrob = (rob[0],rob[1]-1)
          if a == 2:
             nrob = (rob[0],rob[1]+1)           
          if a == 3:
             nrob = (rob[0]-1,rob[1])      
          if a == 4:
             nrob = (rob[0]+1,rob[1])
          if nrob not in rpath:
             stp = a
             rpath.append(nrob)         
             drob = nrob
        if op1 == 2:
          found = True
      for b in border:
        path.append(b)
      path.append(stp)
      nbpath.append(stp)
      rob = drob
      sz = 30
      if (ct % 10 == 0) or found:
       print (frob)
       print(path)
       for y in range(sz*2):
        line = ""
        for x in range(sz*2):
          if (x-sz,y-sz) in nmap:
            bt = nmap[(x-sz,y-sz)]
            if bt == 1:              
              ch = '#'
            elif bt == 4:                
              ch = 'S'
            elif bt == 2:
              ch = 'O'
            elif bt == 0:
              ch = '.'
            if (x-sz,y-sz) == frob:              
              ch = 'F'
            line += ch
          else:
            line += '_'
        print(line)
       print('frob',frob)
       print('ct',ct)
       print('nbpath',nbpath)
       print('step',step)
        
    
    
      
